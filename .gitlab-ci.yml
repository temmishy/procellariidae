stages:
  - test
  - build
  - deploy

variables:
  IMAGE_NAME: ${CI_REGISTRY}/temmishy/procellariidae

test:
  image: python:latest
  stage: test
  script:
    - pip install -r requirements.txt
    - python manage.py test --noinput
  tags:
    - docker

build:
  image: docker
  services:
    - docker:dind
  stage: build
  script:
    - sed -i "s/%%%BUILDTAG%%%/${CI_COMMIT_SHORT_SHA}/g" ./procellariidae/templates/base.html
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker build -t ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} .
    - docker push ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
    - docker tag ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} ${IMAGE_NAME}:latest
    - docker push ${IMAGE_NAME}:latest
    - if [[ ! -z "${CI_COMMIT_TAG}" ]]; then docker tag ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} ${IMAGE_NAME}:${CI_COMMIT_TAG}; fi
    - if [[ ! -z "${CI_COMMIT_TAG}" ]]; then docker push ${IMAGE_NAME}:${CI_COMMIT_TAG}; fi
  tags:
    - docker

deploy:
  stage: deploy
  script:
    - cp ./docker-compose.yaml /var/www/django-app
    - cd /var/www/django-app
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker-compose pull
    - docker-compose stop web || true
    - docker-compose up -d --force-recreate
  tags:
    - shell